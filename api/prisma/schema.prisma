// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary" // importante si no se aplica sin esto
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String  @unique
  password String

  estado   Boolean @default(true)

  usuarioRoles UsuarioRol[]
  
  auditoriaLogs AuditoriaLog[]

  actualizadoEn DateTime? @updatedAt
  creadoEn DateTime? @default(now())

}

enum Role {
  USER
  ADMIN
  SUPERUSER
}

enum EstadoCliente {
  ACTIVO
  INACTIVO
}

enum TipoDocumento {
  NIT
  CC
  CE
  TI
  PASAPORTE
}
enum TipoEntregaProducto {
  RECOGE_EN_PLANTA
  ENTREGA_AL_CLIENTE
}
enum EstadoPedido {
  PENDIENTE
  EN_PROCESO
  ENTREGADO
  CANCELADO
}

enum UnidadMedida {
  UND // Unidad
  KG // Kilogramo
  L // Litro
  M3 // Metro cúbico
  M2 // Metro cuadrado
}


model Cliente {
  id             String              @id @default(cuid())
  documento      String              @unique // NIT o número de documento como clave primaria
  tipoDocumento  TipoDocumento       @default(NIT) // Tipo de documento (e.g.NITcédula)
  nombre         String
  idMunicipio    String
  direccion      String
  zonaBarrio     String?
  contactoPrincipal String?
  telefono       String?
  contactoPagos   String?
  telefonoPagos   String?
  email          String?
  estado         EstadoCliente       @default(ACTIVO)
  inventarios    InventarioCliente[]
  pedidos        Pedido[]
  cotizaciones   Cotizacion[]
  lugaresEntrega LugarEntrega[]
  municipio      Municipio           @relation(fields: [idMunicipio], references: [id])
}

model Proveedor {
  id            String        @id @default(cuid())
  documento     String        @unique // NIT o número de documento como clave primaria
  tipoDocumento TipoDocumento @default(NIT) // Tipo de documento (e.g., NIT, cédula)
  nombre        String
  telefono      String?
  direccion     String        @default("")
  facturaIva    Boolean       @default(false)
  productos     Producto[]
}

model Presentacion {
  id          String     @id @default(cuid())
  nombre      String
  descripcion String?
  productos   Producto[]
}

model Producto {
  id                String              @id @default(cuid())
  nombre            String
  idPresentacion    String
  idProveedor       String
  tipo              String
  pesoVolumen       Float
  precioBase        Float
  unidadMedida      UnidadMedida        @default(UND)
  inventarios       InventarioCliente[]
  detalleCotizacion DetalleCotizacion[]
  detallePedidos    DetallePedido[] // Relación opuesta con DetallePedido
  presentacion      Presentacion        @relation(fields: [idPresentacion], references: [id])
  proveedor         Proveedor           @relation(fields: [idProveedor], references: [id])
}

model InventarioCliente {
  id             String   @id @default(cuid())
  cliente        Cliente  @relation(fields: [idCliente], references: [id])
  idCliente      String
  producto       Producto @relation(fields: [productoId], references: [id])
  productoId     String
  precioEspecial Float
}

model Cotizacion {
  id        String              @id @default(cuid())
  fecha     DateTime            @default(now())
  cliente   Cliente             @relation(fields: [idCliente], references: [id])
  idCliente String
  total     Float
  detalles  DetalleCotizacion[]
}

model DetalleCotizacion {
  id             String     @id @default(cuid())
  cotizacion     Cotizacion @relation(fields: [cotizacionId], references: [id])
  cotizacionId   String
  producto       Producto   @relation(fields: [productoId], references: [id])
  productoId     String
  cantidad       Int
  precioUnitario Float
  subtotal       Float
}

model Pedido {
  id            String       @id @default(cuid())
  fechaRecibido DateTime     @default(now())
  idCliente     String
  estado        EstadoPedido @default(PENDIENTE)
  codigo        BigInt @unique @default(autoincrement())
  observaciones  String?
  fechaEntrega   DateTime?
  tiempoEntrega  Int?
  pesoDespachado Float @default(0)
  detallesPedido      DetallePedido[]
  entregas       Entrega[]
  ordenCompra    String?
  cliente        Cliente         @relation(fields: [idCliente], references: [id])
  pedidoDocumentos PedidoDocumento[]
}

model PedidoDocumento {
  id           String   @id @default(uuid())
  documentoId  String
  pedidoId     String
  pedido       Pedido   @relation(fields: [pedidoId], references: [id])
  documento    Document @relation(fields: [documentoId], references: [id], onDelete: Cascade)
}

enum EstadoDetallePedido {
  PENDIENTE
  EN_TRANSITO
  PARCIAL
  ENTREGADO
  CANCELADO
}
model DetallePedido {
  id             String       @id @default(cuid())
  pedido         Pedido       @relation(fields: [pedidoId], references: [id])
  pedidoId       String
  producto       Producto     @relation(fields: [productoId], references: [id])
  lugarEntregaId String?
  codigo          BigInt @unique @default(autoincrement())
  lugarEntrega   LugarEntrega?  @relation(fields: [lugarEntregaId], references: [id])
  productoId     String
  fechaCreacion  DateTime     @default(now())
  fechaEntrega   DateTime?
  remision       String?
  unidades       Float          @default(0)
  cantidad       Float        @default(0)
  pesoTotal      Float?        @default(0)
  estado       EstadoDetallePedido @default(PENDIENTE)
  tipoEntrega    TipoEntregaProducto @default(ENTREGA_AL_CLIENTE)
  precioUnitario        Float             @default(0) // el precio en el que se genero el producto
  cantidadDespachada    Float             @default(0)
  cantidadEntregada     Float             @default(0)
  cantidadProgramada    Float           @default(0)
  entregasDetallePedido EntregaProducto[]
}

enum EstadoEntrega {
  PENDIENTE
  EN_TRANSITO
  ENTREGADO
  CANCELADO
}

model Entrega {
  id              String       @id @default(cuid())
  codigo          BigInt       @unique @default(autoincrement())
  pedido          Pedido       @relation(fields: [pedidoId], references: [id])
  pedidoId        String
  vehiculoInterno String?
  vehiculoExterno String?
  entregadoPorA   String?
  tipoEntrega     String?
  fechaEntrega    DateTime?
  remision        String?
  observaciones   String?
  estado          EstadoEntrega     @default(PENDIENTE)
  fechaCreacion DateTime @default(now())
  entregaProductos EntregaProducto[]
}

model EntregaProducto {
  id              String @id @default(cuid())
  entregaId       String
  detallePedidoId String

  detallePedido      DetallePedido @relation(references: [id], fields: [detallePedidoId])
  cantidadDespachada Float         @default(0)
  cantidadDespachar Float           @default(0)
  cantidadEntregada Float           @default(0)
  fechaEntrega    DateTime?
  observaciones      String?

  entrega Entrega @relation(fields: [entregaId], references: [id])
}

model LugarEntrega {
  id        String @id @default(cuid())
  idCliente String
  nombre    String
  idCiudad  String
  direccion String
  contacto  String?
  telefonoEntregas  String?

  activo          Boolean         @default(true)
  cliente         Cliente         @relation(fields: [idCliente], references: [id])
  ciudad          Municipio       @relation(fields: [idCiudad], references: [id])
  detallesPedidos DetallePedido[]

  @@index([nombre])
}

model Municipio {
  id             String       @id @default(cuid())
  nombre         String
  departamento   Departamento @relation(fields: [idDepartamento], references: [id])
  estado         Boolean      @default(true)
  idDepartamento String

  clientes       Cliente[]
  lugaresEntrega LugarEntrega[]

  @@index([nombre])
}

model Departamento {
  id       String      @id @default(cuid())
  nombre   String
  ciudades Municipio[]
  pais     Pais        @relation(fields: [idPais], references: [id])
  idPais   String

  @@index([nombre])
}

model Pais {
  id            String         @id @default(cuid())
  nombre        String
  departamentos Departamento[]

  @@index([nombre])
}


model Document {
  id          String   @id @default(uuid())
  fileName    String
  originalName String
  mimeType    String
  size        Int
  path        String   @unique
  url         String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  pedidoDocumentos PedidoDocumento[]
}



enum TipoOperacion {
  CREAR
  ACTUALIZAR
  ELIMINAR
  INICIAR_SESION
  CERRAR_SESION
  VER
  EXPORTAR
  IMPORTAR
  APROBAR
  RECHAZAR
  CANCELAR
  ACTIVAR
  DESACTIVAR
}


enum NivelAuditoria {
  INFO
  ADVERTENCIA
  ERROR
  CRITICO
}

model AuditoriaLog {
  id            String         @id @default(cuid())
  fechaHora     DateTime       @default(now())
  
  // Usuario que ejecutó la acción
  usuarioId     String?
  
  // Información de la operación
  tipoOperacion TipoOperacion
  entidad       String         // Nombre del modelo/tabla afectada (ej: "Cliente", "Pedido", "Producto")
  entidadId     String?        // ID del registro afectado
  nivel         NivelAuditoria @default(INFO)
  
  // Detalles de la operación
  descripcion   String         // Descripción legible de la acción
  modulo        String?        // Módulo de la aplicación (ej: "Ventas", "Inventario", "Usuarios")
  accion        String?        // Acción específica (ej: "crear_pedido", "actualizar_cliente")
  
  // Datos técnicos
  valoresAnteriores Json?       // Estado anterior del registro (para UPDATE/DELETE)
  valoresNuevos     Json?       // Estado nuevo del registro (para CREATE/UPDATE)
  
  // Información del contexto
  ipAddress     String?
  userAgent     String?
  sessionId     String?
  
  // Información adicional
  observaciones String?
  metadata      Json?          // Información adicional en formato JSON
  
  usuario User? @relation(fields: [usuarioId], references: [id])
  // Índices para optimizar consultas
  @@index([entidad, entidadId])
  @@index([fechaHora, tipoOperacion])
  @@index([usuarioId, fechaHora])

}

model Rol {
  id          String  @id @default(cuid())
  nombre      String  @unique // ej: "ADMIN", "EDITOR", "VIEWER"
  descripcion String?
  activo      Boolean @default(true)
  
  // Relaciones
  usuarioRoles      UsuarioRol[]
  rolFuncionalidades RolFuncionalidad[]
  
  creadoEn     DateTime @default(now())
  actualizadoEn DateTime @updatedAt
}
model Funcionalidad {
  id          String  @id @default(cuid())
  nombre      String  @unique // ej: "usuarios", "productos", "reportes"
  descripcion String?
  ruta        String? // Ruta de Next.js ej: "/dashboard/usuarios"
  activo      Boolean @default(true)
  icon        String?
  
  // Relaciones
  rolFuncionalidades RolFuncionalidad[]
  acciones          Accion[]
  
  creadoEn     DateTime @default(now())
  actualizadoEn DateTime @updatedAt
}

model Accion {
  id               String  @id @default(cuid())
  nombre           String  // ej: "crear", "leer", "actualizar", "eliminar", "exportar"
  descripcion      String?
  funcionalidadId  String
  
  // Relaciones
  funcionalidad    Funcionalidad @relation(fields: [funcionalidadId], references: [id], onDelete: Cascade)
  rolAcciones     RolAccion[]
  endpointAcciones EndpointAccion[]
  
  creadoEn     DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  
  @@unique([nombre, funcionalidadId]) // Una acción no se puede repetir en la misma funcionalidad
}

model Endpoint {
  id          String  @id @default(cuid())
  ruta        String  // ej: "/api/usuarios", "/api/productos/:id"
  metodo      MetodoHTTP // GET, POST, PUT, DELETE, PATCH
  descripcion String?
  activo      Boolean @default(true)
  
  // Relaciones
  endpointAcciones EndpointAccion[]
  
  creadoEn     DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  
  @@unique([ruta, metodo]) // Una ruta no puede tener el mismo método duplicado
}

// Relación muchos a muchos entre Acciones y Endpoints
model EndpointAccion {
  accionId   String
  endpointId String
  
  accion   Accion   @relation(fields: [accionId], references: [id], onDelete: Cascade)
  endpoint Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  
  creadoEn DateTime @default(now())
  
  @@id([accionId, endpointId])
}

enum MetodoHTTP {
  GET
  POST
  PUT
  DELETE
  PATCH
}

// ===== TABLAS DE RELACIÓN (MANY-TO-MANY) =====

// Usuarios y Roles (muchos a muchos)
model UsuarioRol {
  userId String
  rolId  String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  rol  Rol  @relation(fields: [rolId], references: [id], onDelete: Cascade)
  
  asignadoEn  DateTime @default(now())
  asignadoPor String? // ID del usuario que asignó el rol
  
  @@id([userId, rolId])
}

// Roles y Funcionalidades (muchos a muchos)
model RolFuncionalidad {
  rolId           String
  funcionalidadId String
  
  rol           Rol           @relation(fields: [rolId], references: [id], onDelete: Cascade)
  funcionalidad Funcionalidad @relation(fields: [funcionalidadId], references: [id], onDelete: Cascade)
  
  // Relación con las acciones específicas que puede hacer este rol en esta funcionalidad
  rolAcciones RolAccion[]
  
  asignadoEn DateTime @default(now())
  
  @@id([rolId, funcionalidadId])
}

// Acciones específicas que un rol puede hacer en una funcionalidad
model RolAccion {
  rolId           String
  funcionalidadId String
  accionId        String
  
  rolFuncionalidad RolFuncionalidad @relation(fields: [rolId, funcionalidadId], references: [rolId, funcionalidadId], onDelete: Cascade)
  accion          Accion          @relation(fields: [accionId], references: [id], onDelete: Cascade)
  
  permitido Boolean @default(true)
  
  creadoEn DateTime @default(now())
  
  @@id([rolId, funcionalidadId, accionId])
}